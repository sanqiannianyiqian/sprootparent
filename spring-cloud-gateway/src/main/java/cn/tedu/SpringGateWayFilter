

import com.huawei.it.sso.filter.util.SsoConstants;
import com.huawei.it.sso.filter.util.SsoUtil;
import com.huawei.it.support.usermanage.helper.UserInfoBean;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpCookie;
import org.springframework.http.server.RequestPath;
import org.springframework.stereotype.Component;
import org.springframework.util.MultiValueMap;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebSession;
import reactor.core.publisher.Mono;
import redis.clients.jedis.JedisCluster;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.List;

import static org.springframework.http.HttpStatus.UNAUTHORIZED;

/*
        *@author gWX954378
        *@date 2020/8/11 19:43

*/
@Component
@Slf4j
public class FilterOfSpringCloud implements GlobalFilter, Ordered {
    @Autowired
    JedisCluster jedisCluster;

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        RequestPath path = exchange.getRequest().getPath();
        String url = path.toString();
        System.out.println(url);
        String userKey = null;
        MultiValueMap<String, HttpCookie> cookies = exchange.getRequest().getCookies();
        for (String s : cookies.keySet()) {
            if ("USER_TICKET".equals(s)) {
                String user_ticket = cookies.getFirst("USER_TICKET").toString();
                String[] split = user_ticket.split("=");
                userKey = split[1];
                break;
            }
        }
        if (null == userKey) {
            exchange.getResponse().setStatusCode(UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }
        Long leftTime = jedisCluster.pttl(userKey);
        if (leftTime < 1000 * 60 * 30) {
            jedisCluster.pexpire(userKey, 1000 * 60 * 60 );
        }
        if (null == jedisCluster.get(userKey)) {
            exchange.getResponse().setStatusCode(UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }else{
//             System.out.println("================");
            return chain.filter(exchange);
//        WebSession session = (WebSession)exchange.getSession();
//        WebSession session = exchange.getSession().block();
//        System.out.println(session);
//        UserInfoBean uiBean = (UserInfoBean) session.getAttribute(SsoConstants.SESSION_USER_INFO_KEY);
//        Mono<UserInfoBean> uiBean = exchange.getSession().flatMap(session -> session.getAttribute(SsoConstants.SESSION_USER_INFO_KEY);
//        System.out.println(uiBean);
//        if (null == uiBean) {
//            SsoUtil.loginAndRedirect2AppCurrentURL((HttpServletRequest)servletRequest, (HttpServletResponse)servletResponse);
//            SsoUtil.loginAndRedirect2AppCurrentURL(exchange.getRequest(), exchange.getResponse());
//            SsoUtil.loginAndRedirect2GivenUrl((HttpServletRequest)servletRequest,(HttpServletResponse)servletResponse, "http://localhost.huawei.com:81/itoc/login.html");
//            resp.sendRedirect("http://itoc-test.sd.huawei.com:80/itoc/login.html");
//            exchange.getResponse().setStatusCode(UNAUTHORIZED);
//            return chain.filter(exchange);
//            return exchange.getResponse().setComplete();}
//            session.getAttributes().put(SsoConstants.SESSION_USER_INFO_KEY, uiBean);

        }
//        return chain.filter(exchange);
    }
    @Override
    public int getOrder() {
        return 0;
    }
}
